gene_prompt_step1 = """
#角色:
你是一名出色的基因检测专家, 能够精准地识别并理解报告中的基因检测信息.
#任务: 请根据下面提供的报告提取出每次基因检测中的有关基因突变的信息. 报告中可能包含若干次基因检测, 以日期分隔.
##子任务1: 
你要将每次基因检测的结果创建为一个JSON对象, JSON对象中的键和值的详细描述在下面的"输出格式中"; 如果有多次基因检测, 就将多个JSON对象放到一个列表中. 与日期相关的字段格式为'%Y-%m-%d', 如果年/月/日中任何一项或多项是"NA"的, 原样输出"NA". 请确保所有的信息直接来源于报告, 不要做任何推理. 请确认你没有漏掉任何基因检测结果. 
#子任务2:
如果子任务1中提取到了至少一次基因检测, 则键"患者是否进行基因检测"所对应的值为"是".
#子任务3:
如果报告中提到了"无驱动基因"或者"驱动基因无突变", 则键"无驱动基因"所对应的值为"是"; 否则为"NA".
#输入报告: 
{report}
#请不要输出解释性语句.输出格式: 
{
基因检测日期: 输出格式为'%Y-%m-%d'
患者是否进行基因检测: 选项为['是','否']
无驱动基因: 选项为['NA', '是']
基因检测: 直接原样提取基因的名称和突变类型. 注意: 所有提取的信息必须直接来源于报告文本,不允许基于文本内容进行任何形式的推断,假设或改变. 如果无驱动基因是'是'，这里应该是空.
}
"""
gene_prompt_step2 = """
#角色: 你是一名出色的基因检测专家, 能够精准地识别并理解报告中的基因检测信息.
#突变类型列表：基因所对应的突变类型总结在下面的JSON列表中
[
{
"基因名称": "EGFR",
 "突变类型": ["阳性", "阴性", "扩增", "18阳性", "E709G", "E709V", "18del", "G719A", "G719C", "G719D",   "G719S", "G719X", "19阳性", "19del", "19ins", "20阳性", "20插入", "C797S", "T790M", "S768I", "21阳性", "L858R", "L861Q", "其他罕见突变"]
}，
{
"基因名称": "ALK",
"突变类型": ["阳性", "阴性", "融合", "点突变", "重排", "插入", "扩增", "易位"]
},
{
"基因名称": "ROS1",
"突变类型": ["阳性", "阴性", "融合", "点突变", "重排", "G3032R", "S1986F", "S1986Y"]
},
{ 
"基因名称": "KRAS",
"突变类型": ["阳性", "阴性", "扩增", "G12A", "G12C", "G12D", "G12F", "G12V", "G12X", "G13C", "G13D", "G213X", "Q61L", "Q61H", "Q61Q", "Q61X", "其他罕见突变"]
},
{
"基因名称": "BRAF",
"突变类型": ["阳性", "阴性", "V600E", "非V600"]
},
{
"基因名称": "MET",
"突变类型": ["阳性", "阴性", "met扩增", "met融合", "met14跳突", "met14插入", "met14缺失", "c-met过表达", "其他罕见突变"]
},
{
"基因名称": "RET",
"突变类型": ["阳性", "阴性", "融合", "点突变", "重排", "插入", "缺失"]
},
{
"基因名称": "HER2（ERBB2）",
突变类型: ["阳性", "阴性", "20插入", "非20插入"]
},
{
"基因名称": "NTRK",
"突变类型": ["阳性", "阴性", "融合", "点突变", "重排", "NTRK1", "NTRK2", "NTRK3"]
},
{
"基因名称": "ATM",
"突变类型": ["阳性", "阴性"]
},
{
"基因名称": "BRCA",
"突变类型": ["阳性", "阴性", "BRCA1", "BRCA2"]
},
{
"基因名称": "FGFR",
"突变类型": ["阳性", "阴性", "融合", "点突变", "重排", "易位", "FGFR1", "FGFR2", "FGFR3", "FGFR4"]
},
{
"基因名称": "HER3（ERBB3）",
突变类型: ["阳性", "阴性"]
},
{
"基因名称": "KEAP1",
"突变类型": ["阳性", "阴性"]
},
{
"基因名称": "HER4（ERBB4）",
"突变类型": ["阳性", "阴性"]
},
{
"基因名称": "NFE2L2（NRF2）",
"突变类型": ["阳性", "阴性"]
},
{
"基因名称": "NF1",
"突变类型": ["阳性", "阴性"]
},
{
"基因名称": "NRAS",
"突变类型": ["阳性", "阴性", "Q61K", "Q61L", "Q61R", "G12A", "G12C", "G12D", "G13R", "其他罕见突变"]
},
{
"基因名称": "Nectin-4",
"突变类型": ["阳性", "阴性"]
},
{
"基因名称": "RB1"
"突变类型": ["阳性", "阴性"]
},
{
"基因名称": "STK11"
"突变类型": ["阳性", "阴性"]
},
"基因名称": "TP53"
"突变类型": ["阳性", "阴性"]
]
#任务: 
请理解输入数据中键为"基因检测"的值, 并根据"突变类型列表"找到和其对应的"基因名称"和"突变类型"值.  如果输入中"基因检测"中有某个基因不在"突变类型列表"中, 则输出中'基因检测'对应的值为空. 如果输入数据中的"基因检测"的值没有基因类型的信息, 请根据突变类型从"突变类型列表"中查找"基因类型". "基因检测"中的信息有可能匹配多个"突变类型", 这种情况下请将多个匹配的突变类型以列表的形式输出. 无论是"基因检测"的值是否为空，"基因检测日期"都要复制输入数据中基因检测的日期.
#输入数据：
{list_in_values}
#请不要输出解释性语句.输出格式 
[{
"基因检测日期": "拷贝输入数据中基因检测日期", 
"基因检测": 
    {
    "基因名称": "突变类型"
    }
}]

"""
con_disease_prompt_step1 = """
#角色: 你是经验丰富的临床医生, 擅长分析患者报告, 能够精准读取伴随疾病.
#主诉疾病: 肺癌 
#定义: 
##伴随疾病: 指在患者有主诉疾病的情况下, 同时存在的其他疾病. 注意: 和肺癌相关的疾病不属于伴随疾病; 名称中含有"继发"的也不属于伴随疾病.; 症状不是疾病. 
##模块列表: 即患者病历常见模块列表:
["现病史","既往史","诊断","出院诊断","入院诊断", "家族史"]
#任务: 
请从输入报告中提取伴随疾病。将每个提取到伴随疾病创建为一个JSON对象, 多个伴随疾病就构成JSON列表. 对于在报告中多次出现的伴随疾病, 如果来自不同的模块, 则每次出现的伴随疾病需要作为单独的JSON输出. 例如"高血压"出现在"既往史","诊断"模块中, 则应输出两个JSON对象, 信息来源分别为"既往史","诊断". 提取的伴随疾病必须和报告原文一致, 不要进行诊断和推理, 比如原文中只写了血压值，而未诊断为高血压，就不该提取出"高血压". 
# 输入报告:
{report} 
#请不要输出解释性语句.输出格式: 
[{
伴随疾病确诊日期: 输出格式为'%Y-%m-%d'. 如果"信息来源"是“诊断”, 则采用"就诊时间"; 如果是"出院诊断", 则采用"出院时间"; 如果为"入院诊断", 则采用"入院时间". 如无日期信息, 输出'NA'.
信息来源: 从['现病史', '既往史', '诊断', '出院诊断', '入院诊断', '家族史']中选择该伴随疾病的来源. 只能从模块列表中选择, 如果没有匹配, 请使用最接近的模块,比如'辅助检查'属于'诊断'.
伴随疾病名称: 直接提取该伴随疾病, 不要进行诊断和推理. 如出现否认某疾病的,不要提取. 名称中含有'继发'的不要提取.
}]
"""
con_disease_prompt_step2 = """
#角色: 你是经验丰富的医学专家, 擅长将疾病名称映射到标准化的名字上.
#标准疾病名表:
[间质性肺炎, 肺纤维化, 呼吸系统疾炎症, 呼吸系统感染, 肺不张, 肺水肿, 气胸, 血胸, 脓胸, 肺大疱, 阻塞性肺气肿, 慢性支气管炎, 肺栓塞, 肺脓肿, 肺气肿, 慢性阻塞性肺疾病, 哮喘, 呼吸衰竭, 食管气管瘘, 食管胸膜瘘, 严重肺部感染, 激素治疗中, 放射性肺炎, 穿孔, 梗阻, 腹泻, 消化系统出血, 消化系统溃疡, 肝硬化, 消化系统炎症, 慢性胆囊炎, 胆囊炎,急性胆囊炎,结核, 食管胃底静脉曲张, 肝纤维化, 食管裂孔疝,腹水, 脂肪肝, 消化道结石, 消化道造瘘, 鼻饲, 阿尔茨海默病, 痴呆, 癫痫, 帕金森, 脊髓压迫, 脑梗, 神经精神系统炎症, 神经精神系统感染, 软脑膜疾病, 神经精神系统血栓, 周围神经炎, 抑郁症, 精神分裂, 双向情感障碍, 精神疾病, 心理疾病, 类风湿关节炎, 银屑病, 白癜风, 系统性红斑狼疮, 狼疮性肾炎, 强直性脊柱炎, 特应/异皮炎(湿疹), 带状疱疹, 单纯疱疹, 荨麻疹, 痒疹, 干燥综合征, 重症肌无力格林-巴利综合征, 肌无力综合征, 多发性硬化症, I型糖尿病, II型糖尿病, 特殊性糖尿病, 高尿酸血症, 痛风, 甲状腺功能亢进, 甲状腺功能减退, 甲状旁腺功能亢进症, 甲状旁腺功能减退症, 皮肌炎, 川崎病, 溃疡性结肠炎, 克罗恩病, 葡萄膜炎, 美尼尔病, 活动性肝炎, 甲型肝炎, 乙型肝炎, 丙型肝炎, 艾滋病, 人乳头状瘤病毒感染, 梅毒螺旋体感染, 结核, 非小细胞肺癌, 小细胞肺癌, 胸膜间皮瘤, 胸腺癌, 乳腺癌, 甲状腺癌, 食管癌, 胃癌, 小肠癌, 结直肠癌, 肝癌, 胆道癌, 胰腺癌, 肾癌, 输尿管癌, 膀胱癌, 宫颈癌, 子宫内膜癌, 子宫癌, 卵巢癌, 输卵管癌, 阴道癌, 外阴癌, 前列腺癌, 睾丸癌, 鼻咽癌, 其他头颈部恶性肿瘤, 脑胶质瘤, 恶性周围神经鞘瘤, 骨恶性肿瘤, 间质瘤, 黑色素瘤, 皮肤癌, 白血病, 淋巴瘤, 多发性骨髓瘤, 软组织肉瘤, 其他类型肉瘤, 青光眼, 白内障, 干眼症, 眼结石, 黄斑水肿, 黄斑变性, 眼耳鼻喉相关感染, 穿孔, 软化, 眼耳鼻喉相关出血, 溃烂, 视网膜脱落, 结膜炎, 虹膜炎, 角膜炎, 高血压, 高血脂, 冠心病, 严重心律失常, 心功能不全, 心力衰竭, 卒中, 肝性脑病, 心脑血管血栓, 管腔狭窄, 动脉斑块, 心脑血管炎症, 心肌病, 心脑血管出血, 栓塞, 动脉粥样硬化, 埂塞, 上腔静脉压塞综合征, 肺源性心脏病, 肿瘤破裂, 阵发性房颤, 高血压脑病, 尿毒症, 严重肾功能不全, 肾功能衰竭, 肾性贫血, 肾积水, 泌尿生殖系统炎症, 泌尿生殖系统出血, 高血压肾病, 肾囊肿, 运动系统炎症, 运动系统出血, 运动系统溃疡, 骨折, 股骨头坏死, 瘫痪]
#任务: 你的任务是根据输入JSON中的伴随疾病名称找到"标准疾病名表"中和它相同含义的疾病. 请勿根据输入的伴随疾病去做诊断或推理再去"标准疾病表"中做对应. 如果在"标准疾病名表"中没有找到相应的疾病, 则在输出中不需要输出这条伴随疾病的JSON.  如果输入的伴随疾病名称中包含多个标准疾病名, 则进行分词, 每个标准疾病名输出一个JSON结构.
#输入数据：
{list_in_values}
#输出格式: 
请不要输出解释性语句.
The output should be a markdown code snippet formatted in the following schema, including the leading and trailing ```json and ```:
[
{
"伴随疾病确诊日期": "拷贝输入中的伴随疾病确诊日期"
"信息来源": "拷贝输入中的信息来源",
"伴随疾病名称": "拷贝输入中的伴随疾病名称",
"对应伴随疾病名称": "用'标准疾病名'中相同含义的疾病名来替换, 只能用'标准疾病名'中的疾病名",
}
]
"""
bingli_prompt = """
您是一名具备专业技能的医生，拥有丰富的临床经验和医学知识，能够准确解读医学报告中的各种医疗数据。您的任务是从下面的‘医学报告’中提取所有与【肺癌】病理检查相关的信息，临床诊断中的病理也应被提取。需要你将每次病理检测的结果创建为一个JSON对象。JSON对象中的键和值的详细描述在下面的‘输出格式’中；如果报告中有多次病理检测，就将多个JSON对象放到一个列表中。请注意，只关注报告中明确提及的病理检测结果，而不是基于影像学检查（如CT扫描、PET/CT等）的诊断。请忽略任何基因检测、影像学检查和其他非病理学的医学检查结果。
注意报告中是以日期为分隔的段落。与日期相关的字段格式为'%Y-%m-%d'，如果年/月/日中的任何一项或多项缺失，用NA代替，请按照这种格式输出（例如'2023-05-NA'）。若这些日期都不可用，请输出‘NA’。
请确保信息直接从医学报告中原样提取，避免任何推理。如果某个字段在报告中未提及，请输出‘NA’。
输入报告:{report} 
#输出格式: 
请不要输出解释性语句.
The output should be a markdown code snippet formatted in the following schema, including the leading and trailing ```json and ```:
[
{
"病理日期": "输出格式为'%Y-%m-%d"
"病理类型": "病理类型是最终病理结果，如腺癌、鳞癌等，是病理名词。不要一些“考虑”字眼的这种病理推测。请确保信息直接从医学报告中原样提取，避免任何推理。"
}
]
"""
mianyi_prompt = """你的任务是按要求解析一个报告中'免疫检测'记录的相关信息。注意报告中是以日期为分隔的段落，所以免疫检测日期应该输出最接近免疫检测结果描述的日期。
需要你将每次免疫组化检测的结果创建为一个JSON对象，JSON对象中的键和值的详细描述在下面的'输出格式中'；如果有多次免疫组化检测，就将多个JSON对象放到一个列表中。解析出来的结果必须直接来源于原报告,请不要通过推理、计算等得出结论。请务必不要误解成写代码,也不要输出任何说明性文字,直接输出结果。注意:提取不到的字段输出'NA'。
以下是三件非常重要的事情：
1. TPS和PDL1分别是不同的指标，请勿混为一谈，这非常重要。
2. IC和PDL1分别是不同的指标，请勿混为一谈，这非常重要。
3. 病历中没有提到TPS这个指标的时候，请勿用PDL1代替。
输入报告:{report} 
#输出格式: 
请不要输出解释性语句.
The output should be a markdown code snippet formatted in the following schema, including the leading and trailing ```json and ```:
[
{
"免疫检测日期": "输出格式为'%Y-%m-%d"
"TPS": "当有PDL1评分同时出现的时候,注意区分两者的区别,当病历中没有明确提到TPS时,TPS的值是NA,只输出TPS的数值和%、<、>等符号,不要字母"
"CPS": "没有明确提到CPS的时候,CPS的值应该是NA,只输出CPS数值和%、<、>等符号,不要字母"
"IPS": "没有明确提到IPS的时候,IPS的值应该是NA,只输出IPS数值和%、<、>等符号,不要字母"
"TC": "没有明确提到TC的时候,TC的值应该是NA,只输出TC数值和%、<、>等符号,不要字母"
"IC": "没有明确提到IC的时候,IC的值应该是NA,只输出IC数值和%、<、>等符号,不要字母"
"PDL1": "当有TPS评分同时出现的时候,注意区分两者的区别,当病历中没有明确提到PDL1的时候,PDL1的值应该是NA,只输出PDL1数值和%、<、>等符号,不要字母"
"CD73": "没有明确提到CD73的时候，CD73的值应该是NA，只输出CD73数值和%、<、>等符号,不要字母"
}
]
"""


def cailiao_date(report_type, ocr):
    cailiao_date_prompt = """
    你的任务是按要求提取{report_type}中相关的日期，按照要求输出结果。提取不到的日期字段输出'NA'。拜托了！
    输入报告:{report} 输出格式: #输出格式: 
    请不要输出解释性语句.
    The output should be a markdown code snippet formatted in the following schema, including the leading and trailing ```json and ```:
    {report_type_format}
    """

    # 合并具有相同日期格式的类型
    in_out_hospital_reports = ["出入院记录", "疾病诊断书", "其他疾病诊断书", "出入院疾病诊断书"]
    outpatient_reports = ["门诊病历", "门诊疾病诊断书"]
    pathology_reports = ["病理会诊", "病理会诊记录"]
    detailed_reports = ["病理报告", "基因检测", "检查记录"]

    if report_type in in_out_hospital_reports:
        report_type_format = '[{"出院日期": "输出格式为\'%Y-%m-%d","入院日期": "输出格式为\'%Y-%m-%d"}]'
    elif report_type in outpatient_reports:
        report_type_format = '[{"门诊日期": "输出格式为\'%Y-%m-%d"}]'
    elif report_type in pathology_reports:
        report_type_format = '[{"会诊日期": "输出格式为\'%Y-%m-%d"}]'
    elif report_type in detailed_reports:
        report_type_format = '[{ "检查日期": "输出格式为\'%Y-%m-%d", "报告日期": "输出格式为\'%Y-%m-%d", "审核日期": "输出格式为\'%Y-%m-%d", "送检日期": "输出格式为\'%Y-%m-%d", "收到日期": "输出格式为\'%Y-%m-%d", "申请日期": "输出格式为\'%Y-%m-%d"}]'
    else:
        return "无效的报告类型"

    return cailiao_date_prompt.format(report_type=report_type, report_type_format=report_type_format, report=ocr)


drug_prompt = """
你的任务是按要求提取报告中和‘治疗用药’相关的信息,按照要求输出结果。提取不到的字段输出'NA'。注意报告中是以日期为分隔的段落。与日期相关的字段格式为'%Y-%m-%d'，如果年/月/日中的任何一项或多项缺失，报告中已用“NA”代替，直接输出即可。若有多条不同日期的治疗记录，需要你将每个治疗周期创建为一个JSON对象，将多个JSON对象放到一个列表中，切勿遗漏。
输入报告:{report} 
输出格式: The output should be a markdown code snippet formatted in the following schema, including the leading and trailing ```json and ```:
[
{
"治疗开始日期": "输出格式为'%Y-%m-%d,若没有明确指出开始日期，请直接输出'NA'。"
"治疗用药名称": "以列表形式列出，提取报告中患者治疗用药的药品名称。若提取不到用药名称，则直接输出'NA'。"
"治疗用药是否为建议": "可选项为'是','否',没有药品信息时输出'NA'。不可多选"
"治疗开始结束": "输出格式为'%Y-%m-%d,若没有明确指出结束日期，切忌用其他日期替代。"
}
]
"""
report_type_prompt = """判断下列‘输入报告’的类别。输出要求：不要输出解释、选择的原因等说明性文字或符号，直接输出报告属于哪一个类别。
        若报告是"病历记录"或"门诊记录"划分到"门诊病历"类别。记住:输出报告类别必须是可选项中的一种,如果无法判定属于哪个类别默认为'其他'类别。
        输出可选项：出入院记录
门诊病历
检查记录
基因检测
病理报告
病理会诊记录
其他疾病诊断书
出入院疾病诊断书
门诊疾病诊断书
疾病诊断书
病理会诊
其他
        输入报告：{report}
        """

jibing_prompt = """
#角色：你是经验丰富的临床医生, 能够轻松从患者报告中读取疾病相关信息.
#任务：
按要求提取报告中和‘疾病’相关的信息并输出. 解析出来的结果必须直接来源于原报告,请不要通过诊断和推理得出结论.
#输入报告:
{report} 
#输出格式:
请不要输出任何说明性的文字.  r提取不到的字段输出'NA'.
[
{
"首次确诊日期": "输出格式为'%Y-%m-%d,若没有明确指出开始日期，请直接输出'NA'。"
"疾病名称": "可选项为[非小细胞肺癌，小细胞肺癌，胸膜间皮瘤，胸腺癌,肺癌病理不详]"
}
]
"""
